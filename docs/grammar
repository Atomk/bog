root : (stmt NL)* EOF

stmt
    : decl "=" block_or_expr
    | "type" IDENTIFIER "=" union_block_or_type_expr
    | expr

decl : ("let" | "const") primary_expr type?

type : ":" type_expr

union_block_or_type_expr
    : NL (INDENT "|" (IDENTIFIER ":")? type_primary NL)+
    | type_expr

type_expr
    : type_primary
    | IDENTIFIER type? ("|" IDENTIFIER type?)

type_primary
    : "any"
    | "int"
    | "num"
    | "str"
    | "none"
    | "type"
    | "bool"
    | IDENTIFIER
    | "[" union_block_or_type_expr "]"
    | "(" union_block_or_type_expr ")"
    | "(" (type_expr ",")+ type_expr? ")"
    | "{" ((expr ":")? type_expr ",")* ((expr ":")? type_expr)? "}"
    | "fn" "(" (type_expr ",")* type_expr? ")" type?
    | "error" "(" union_block_or_type_expr ")"

expr
    : fn
    | jump_expr
    | bool_expr assign?

block_or_expr : block | expr

block : NL (INDENT stmt NL)+

assign : ("=" | "+=" | "-=" | "*=" | "**=" | "/=" | "//=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=") block_or_expr

jump_expr : "return" block_or_expr? | "break" | "continue"

fn : "fn" "(" (param ",")* param? ")" (":" type_expr)? block_or_expr

param : primary_expr (":" type_expr)? 

bool_expr
    : "not" comparision_expr
    | comparision_expr ("or" comparision_expr)*
    | comparision_expr ("and" comparision_expr)*

comparision_expr
    : range_expr (("<" | "<=" | ">" | ">="| "==" | "!=" | "in") range_expr)?
    | range_expr ("is" type_expr)?

range_expr : bit_expr ("..." bit_expr)?

bit_expr : shift_expr (("&" shift_expr)* | ("|" shift_expr)* | ("^" shift_expr)* | ("catch" ("(" decl ")")? block_or_expr))?

shift_expr : add_expr (("<<" | ">>") add_expr)?

add_expr : mul_expr (("-" | "+") mul_expr)*

mul_expr : cast_expr (("*" | "/" | "//" | "%") cast_expr)*

cast_expr : prefix_expr ("as" type_expr)?

prefix_expr : ("try" | "-" | "+" | "~")? power_expr

power_expr : primary_expr suffix_expr* ("**" power_expr)?

suffix_expr
    : "[" expr "]"
    | "(" (expr ",")* expr? ")"
    | "." IDENTIFIER

primary_expr
    : IDENTIFIER
    | "_"
    | STRING
    | NUMBER
    | "true"
    | "false"
    | "this"
    | "." IDENTIFIER ("=" expr)?
    | "(" block_or_expr ")"
    | "(" (expr ",")+ expr? ")"
    | "{" (expr type? "=" expr ",")* (expr type? "=" expr)? "}"
    | "[" (expr ",")* expr? "]"
    | "error" "(" expr ")"
    | "import" "(" STRING ")"
    | "native" "(" STRING type? ")" 
    | if
    | while
    | for
    | match

if : "if" "(" (decl "=")? expr ")" block_or_expr ("else" block_or_expr)?

while : "while" "(" (decl "=")? expr ")" block_or_expr

for : "for" "(" (decl "in")? expr ")" block_or_expr

match : "match" "(" expr ")" (NL INDENT match_case)+ NL

match_case
    : decl "=>" block_or_expr
    | expr ("," expr)* ","? "=>" block_or_expr
