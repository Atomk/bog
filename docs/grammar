root : (stmt NL)* EOF

stmt : let | expr.l

let : "let" unwrap "=" expr.r

unwrap
    : IDENTIFIER
    | "{" (IDENTIFIER | STRING) ":" unwrap ("," (IDENTIFIER | STRING) ":" unwrap)* "}"
    | "(" ("..." ",")?  unwrap ("," unwrap)* ("," "...")? ")"
    | "[" ("..." ",")?  unwrap ("," unwrap)* ("," "...")? "]"
    | "error" IDENTIFIER

expr
    : fn 
    | [.l jump_expr]
    | bool_expr

jump_expr : "return" expr.r | "break" | "continue"

fn : "fn" "(" (unwrap ",")* ")" expr

bool_expr : comparision_expr (("or" comparision_expr.r)* | ("and" comparision_expr.r)*)

comparision_expr : range_expr (("<" | "<=" | ">" | ">="| "==" | "!=" | "in"  | "is") range_expr.r)

range_expr : bit_expr ("..." bit_expr.r)?

bit_expr : shift_expr (("&" shift_expr.r)* | ("|" shift_expr.r)* | ("^" shift_expr.r)*) | ("catch" ("|" unwrap "|")? expr)

shift_expr : add_expr (("<<" | ">>") add_expr.r)

add_expr : mul_expr (("-" | "+") mul_expr.r)*

mul_expr : prefix_expr (("*" | "/" | "//" | "%") prefix_expr.r)*

prefix_expr 
    : "try" bool_expr.r
    | ("-" | "+" | "not" | "~")? primary_expr suffix_expr* [.l assign]?

assign
    : "=" expr.r
    | ("+=" | "-=" | "*=" | "/=" | "//=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=") bit_expr.r

suffix_expr
    : "[" bool_expr.r "]"
    | "(" (bool_expr.r ",")* ")"
    | "." IDENTIFIER

primary_expr
    : IDENTIFIER
    | STRING
    | NUMBER
    | "true" 
    | "false"
    | "(" (expr.r ",")* ")"
    | "{" ((IDENTIFIER | STRING) ":" expr.r ",")* "}"
    | "[" (expr.r ",")* "]"
    | "error" "(" expr.r ")"
    | "import" "(" STRING ")"
    | block
    | if
    | while
    | for
    | match

block : "(" (NL stmt)+ ")"

if : "if" "(" bool_expr.r ")" expr ("else" "if" "(" bool_expr.r ")" expr)* ("else" expr)?

while : "while" "(" bool_expr.r ")" expr

for : "for" "(" unwrap "in" range_expr.r ")" expr

match : "match" "(" bool_expr.r ")" "(" (NL match_case ",")+ ")"

match_case
    : "let" unwrap ":" expr
    | (bool_expr.r ",")+ ":" expr
