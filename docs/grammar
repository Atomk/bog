root : (stmt NL)* EOF

stmt
    : decl "=" expr
    | expr

decl : ("let" | "const") primary_expr

expr
    : fn
    | jump_expr
    | bool_expr assign?

jump_expr : "return" expr? | "break" expr? | "continue"

fn : "fn" "(" (primary_expr ",")* primary_expr? ")" expr

bool_expr
    : "not" comparision_expr
    | comparision_expr ("or" comparision_expr)*
    | comparision_expr ("and" comparision_expr)*

comparision_expr
    : range_expr (("<" | "<=" | ">" | ">="| "==" | "!=" | "in") range_expr)?
    | range_expr ("is" type_name)?

type_name : "none" | "int" | "num" | "bool" | "str" | "tuple" | "map" | "list" | "error" | "range" | "fn"

range_expr : bit_expr ("..." bit_expr)?

bit_expr : shift_expr (("&" shift_expr)* | ("|" shift_expr)* | ("^" shift_expr)* | ("catch" decl? block))?

shift_expr : add_expr (("<<" | ">>") add_expr)?

add_expr : mul_expr (("-" | "+") mul_expr)*

mul_expr : cast_expr (("*" | "/" | "//" | "%") cast_expr)*

cast_expr : prefix_expr ("as" type_name)?

prefix_expr : ("try" | "-" | "+" | "~")? power_expr

power_expr : primary_expr suffix_expr* ("**" power_expr)?

assign
    : "=" expr
    | ("+=" | "-=" | "*=" | "**=" | "/=" | "//=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=") bit_expr

suffix_expr
    : "[" expr "]"
    | "(" (expr ",")* expr? ")"
    | "." IDENTIFIER

primary_expr
    : IDENTIFIER
    | "_"
    | STRING
    | NUMBER
    | "true"
    | "false"
    | "(" expr ")"
    | "(" (expr ",")+ expr? ")"
    | "{" (expr ":" expr ",")* (expr ":" expr)? "}"
    | "[" (expr ",")* expr? "]"
    | "error" "(" expr ")"
    | "import" "(" STRING ")"
    | block
    | if
    | while
    | for
    | match

block : "{" (expr | ((NL stmt)+ NL)) "}"

if : "if" (decl "=")? expr block ("else" expr)?

while : "while" (decl "=")? expr block

for : "for" decl? range_expr block

match : "match" bool_expr "{" (NL match_case)+ NL "}"

match_case
    : decl block
    | expr ("," expr)* block
