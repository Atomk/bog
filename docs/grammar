root : (stmt NL)* EOF

stmt
    : decl
    | assign_expr

decl : "let" destructuring "=" block_or_expr

destructuring
    : "mut"? IDENTIFIER
    | "_"
    | IDENTIFIER compound_destructuring
    | "error" compound_destructuring
    | compound_destructuring
    | destructuring? ":" (destructuring? (":" destructuring)?)?
    
compound_destructuring
    : "(" destructuring ")"
    | "(" destructuring ("," destructuring)* ","? ")"
    | "[" destructuring ("," destructuring)* ","? "]"
    | "{" destructuring ("," destructuring)* ","? "}"

assign_expr : expr (("=" | "+=" | "-=" | "*=" | "**=" | "/=" | "//=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=") block_or_expr)?

block_or_expr : block | expr

block : NL (stmt NL)+

expr
    : jump_expr
    | fn
    | bool_expr

jump_expr : "return" block_or_expr? | "break" | "continue" | "throw" block_or_expr

fn : "fn" "(" (destructuring ",")* destructuring? ")" block_or_expr

bool_expr
    : "not" comparison_expr
    | comparison_expr ("or" comparison_expr)*
    | comparison_expr ("and" comparison_expr)*

comparison_expr
    : range_expr (("<" | "<=" | ">" | ">="| "==" | "!=" | "in") range_expr)?
    | range_expr ("is" type_name)?

type_name : "none" | "int" | "num" | "bool" | "str" | "tuple" | "map" | "list" | "error" | "range" | "fn"

range_expr : bit_expr? (":" bit_expr? (":" bit_expr)?)?

bit_expr : shift_expr (("&" shift_expr)* | ("|" shift_expr)* | ("^" shift_expr)*

shift_expr : add_expr (("<<" | ">>") add_expr)?

add_expr : mul_expr (("-" | "+") mul_expr)*

mul_expr : cast_expr (("*" | "/" | "//" | "%") cast_expr)*

cast_expr : prefix_expr ("as" type_name)?

prefix_expr : ("-" | "~")? power_expr

power_expr : primary_expr suffix_expr* ("**" power_expr)?

suffix_expr
    : "[" expr "]"
    | "(" (expr ",")* expr? ")"
    | "." IDENTIFIER

primary_expr
    : IDENTIFIER
    | STRING
    | format_string
    | NUMBER
    | "true"
    | "false"
    | "this"
    | "null"
    | initializer
    | "error" initializer?
    | "@" IDENTIFIER initializer?
    | "import" "(" STRING ")"
    | if
    | while
    | for
    | match
    | try

format_string : FORMAT_START expr (FORMAT expr)* FORMAT_END

initializer
    : "(" block_or_expr ")"
    | "(" (expr ",")+ expr? ")"
    | "{" (expr "=" expr ",")* (expr "=" expr)? "}"
    | "[" (expr ",")* expr? "]"

if : "if" ("let" destructuring "=")? expr block_or_expr ("else" block_or_expr)?

while : "while" ("let" destructuring "=")? expr block_or_expr

for : "for" ("let" destructuring "in")? expr block_or_expr

match : "match" expr (NL match_case)+ NL

match_case
    : "let" destructuring "=>" block_or_expr
    | expr ("," expr)* ","? "=>" block_or_expr

try : "try" block_or_expr ("catch" ("let" destructuring | expr)? block_or_expr)*
