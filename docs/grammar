root : (stmt NL)* EOF

stmt : let | expr.l

let : "let" unwrap "=" expr.r

unwrap
    : IDENTIFIER
    | "{" ((expr.r ":")? (unwrap | "_") ",")* "}"
    | "(" ("..." ",")? ((unwrap | "_") ",")* ("," "...")? ")"
    | "[" ("..." ",")? ((unwrap | "_") ",")* ("," "...")? "]"
    | "error" "(" (unwrap | "_") ")"

expr
    : fn 
    | [.l jump_expr]
    | bool_expr

jump_expr : "return" expr.r? | "break" expr.r? | "continue"

fn : "fn" "(" (unwrap ",")* ")" expr.r

bool_expr
    : "not" comparision_expr.r
    | comparision_expr ("or" comparision_expr.r)* 
    | comparision_expr ("and" comparision_expr.r)*

comparision_expr 
    : range_expr (("<" | "<=" | ">" | ">="| "==" | "!=" | "in") range_expr.r)?
    | range_expr ("is" type_name)?

type_name : "none" | "int" | "num" | "bool" | "str" | "tuple" | "map" | "list" | "error" | "range" | "fn"

range_expr : bit_expr ("..." bit_expr.r)?

bit_expr : shift_expr (("&" shift_expr.r)* | ("|" shift_expr.r)* | ("^" shift_expr.r)*) | ("catch" ("let" unwrap ":")? expr)

shift_expr : add_expr (("<<" | ">>") add_expr.r)

add_expr : mul_expr (("-" | "+") mul_expr.r)*

mul_expr : cast_expr (("*" | "/" | "//" | "%") cast_expr.r)*

cast_expr : prefix_expr ("as" type_name)?

prefix_expr
    : ("try" | "-" | "+" | "~") power_expr.r
    | power_expr

power_expr : primary_expr suffix_expr*  ([.l assign?] | ("**" power_expr.r)?)

assign
    : "=" expr.r
    | ("+=" | "-=" | "*=" | "**=" | "/=" | "//=" | "%=" | "<<=" | ">>=" | "&=" | "|=" | "^=") bit_expr.r

suffix_expr
    : "[" expr.r "]"
    | "(" (expr.r ",")* ")"
    | "." IDENTIFIER

primary_expr
    : IDENTIFIER
    | STRING
    | NUMBER
    | "true" 
    | "false"
    | "(" (expr.r ",")* ")"
    | "{" (expr.r ":" expr.r ",")* "}"
    | "[" (expr.r ",")* "]"
    | "error" "(" expr.r ")"
    | "import" "(" STRING ")"
    | block
    | if
    | while
    | for
    | match

block : "{" (NL stmt)+ "}"

if : "if" "(" ("let" unwrap "=") bool_expr.r ")" expr ("else" expr)?

while : "while" "(" ("let" unwrap "=") bool_expr.r ")" expr

for : "for" "(" ("let" unwrap "in") range_expr.r ")" expr

match : "match" "(" bool_expr.r ")" "{" (NL match_case)+ NL "}"

match_case
    : "let" unwrap ":" expr
    | "_" ":" expr
    | (expr.r ",")+ ":" expr
